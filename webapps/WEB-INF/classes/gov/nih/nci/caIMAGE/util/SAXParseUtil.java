 package nci.mmhcc.util;
 
import java.io.*;
import java.util.*;
import java.net.URL;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;


public class SAXParseUtil extends DefaultHandler
{
    static protected OutputStreamWriter out;
    private String indentString = "    ";
    private int indentLevel = 0;
   	static  protected SAXParser saxParser;
    static protected SAXParserFactory factory;
	
	 public static String parseurl(InputStream is){
	 
	 if (is == null) {
     System.err.println("Usage: cmd filename"+is.toString());
     System.exit(1);
     }

        // Use an instance of ourselves as the SAX event handler
        DefaultHandler handler = new SAXParseUtil();
        //System.out.println("This is the ref to file"+handler);
         // Use the validating parser
        SAXParserFactory factory = SAXParserFactory.newInstance();
          //System.out.println("This is the ref to file"+factory);
        factory.setValidating(true);
        //factory.setNamespaceAware(true);
        try {
            // Set up output stream
            out = new OutputStreamWriter(System.out, "UTF8");
			out = new OutputStreamWriter(System.out, "!DOCTYPE ImageServer SYSTEM calcrgn.dtd ");
            //System.out.println("This is output of  file"+out);
            // Parse the input
            SAXParser saxParser = factory.newSAXParser();
            //System.out.println("This is the ref to file"+saxParser+argv[0]);
            saxParser.parse( is, handler);

        } catch (SAXParseException spe) {
           // Error generated by the parser
           System.out.println("\n** Parsing error"
              + ", line " + spe.getLineNumber()
              + ", uri " + spe.getSystemId());
           System.out.println("   " + spe.getMessage() );

           // Use the contained exception, if any
           Exception  x = spe;
           if (spe.getException() != null)
               x = spe.getException();
           x.printStackTrace();

        } catch (SAXException sxe) {
           // Error generated by this application
           // (or a parser-initialization error)
           Exception  x = sxe;
           if (sxe.getException() != null)
               x = sxe.getException();
           x.printStackTrace();

        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();

        } catch (IOException ioe) {
           // I/O error
           ioe.printStackTrace();
        }
return is.toString();
        //System.exit(0);
    }//parse url

    //static private Writer  out;
   // private String indentString = "    "; // Amount to indent
    //private int indentLevel = 0;
    int m_state_start, m_state_end;

       StringBuffer m_textbuf = new StringBuffer();


    //===========================================================
    // SAX DocumentHandler methods
    //===========================================================

    public void setDocumentLocator(Locator l)
    {
        // Save this to resolve relative URIs or to give diagnostics.
        try {

          out.flush();
        } catch (IOException e) {
            // Ignore errors
        }
    }

    public void startDocument()
    throws SAXException
    {

    }

    public void endDocument()
    throws SAXException
    {

    }

    public void startElement(String namespaceURI,
                             String lName, // local element name
                             String qName, // qualified name
                             Attributes attrs)
    throws SAXException
    {
    String aVal =null;

         if (qName=="Catalog")
        {
         m_state_start = 0;
            for (int i = 0; i < attrs.getLength(); i++) {
                 String aName = attrs.getLocalName(i);
                 aVal = attrs.getValue(i);
                 System.out.println("The attribute key = "+qName+ " value = "+aVal +"\n");
          }//for
        }//else if

    }

    public void endElement(String namespaceURI,
                           String sName, // simple name
                           String qName  // qualified name
                          )
    throws SAXException
    {
        if(sName=="Catalog" )
        {
       // m_state_end = 1;
          System.out.println("The end  element = "+sName);

        }
    }

    public void characters(char buf[], int offset, int len)
    throws SAXException
    {

        String s = new String(buf, offset, len);
        Long a = null;
        //if (!s.trim().equals(""))
       //if (s.trim().equals(""))

       if(m_state_start == 1||m_state_end ==1)

       {
        System.out.println("The element value is "+s);
       }
        m_state_end = 0;
        m_state_start = 0;
    }

    public void ignorableWhitespace(char buf[], int offset, int len)
    throws SAXException
    {
        // Ignore it
    }

    public void processingInstruction(String target, String data)
    throws SAXException
    {

        //emit("<?"+target+" "+data+"?>");
    }

    //===========================================================
    // SAX ErrorHandler methods
    //===========================================================

    // treat validation errors as fatal
    public void error(SAXParseException e)
    throws SAXParseException
    {
        throw e;
    }

    // dump warnings too
    public void warning(SAXParseException err)
    throws SAXParseException
    {
        System.out.println("** Warning"
            + ", line " + err.getLineNumber()
            + ", uri " + err.getSystemId());
        System.out.println("   " + err.getMessage());
    }

}
